package togos.minecraft.maprend.renderer;

import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

public enum BlockState {

	FACING_NORTH("facing", "north"),
	FACING_SOUTH("facing", "south"),
	FACING_EAST("facing", "east"),
	FACING_WEST("facing", "west"),
	FACING_UP("facing", "up"),
	FACING_DOWN("facing", "down"),
	FACE_FLOOR("face", "floor"),
	FACE_CEILING("face", "ceiling"),
	FACE_WALL("face", "wall"),
	ROTATION_0("rotation", "0"),
	ROTATION_1("rotation", "1"),
	ROTATION_2("rotation", "2"),
	ROTATION_3("rotation", "3"),
	ROTATION_4("rotation", "4"),
	ROTATION_5("rotation", "5"),
	ROTATION_6("rotation", "6"),
	ROTATION_7("rotation", "7"),
	ROTATION_8("rotation", "8"),
	ROTATION_9("rotation", "9"),
	ROTATION_10("rotation", "10"),
	ROTATION_11("rotation", "11"),
	ROTATION_12("rotation", "12"),
	ROTATION_13("rotation", "13"),
	ROTATION_14("rotation", "14"),
	ROTATION_15("rotation", "15"),
	WATERLOGGED_TRUE("waterlogged", "true"),
	WATERLOGGED_FALSE("waterlogged", "false"),
	OCCUPIED_TRUE("occupied", "true"),
	OCCUPIED_FALSE("occupied", "false"),
	PART_HEAD("part", "head"),
	PART_FOOT("part", "foot"),
	AGE_0("age", "0"),
	AGE_1("age", "1"),
	AGE_2("age", "2"),
	AGE_3("age", "3"),
	AGE_4("age", "4"),
	AGE_5("age", "5"),
	AGE_6("age", "6"),
	AGE_7("age", "7"),
	AGE_8("age", "8"),
	AGE_9("age", "9"),
	AGE_10("age", "10"),
	AGE_11("age", "11"),
	AGE_12("age", "12"),
	AGE_13("age", "13"),
	AGE_14("age", "14"),
	AGE_15("age", "15"),
	AGE_16("age", "16"),
	AGE_17("age", "17"),
	AGE_18("age", "18"),
	AGE_19("age", "19"),
	AGE_20("age", "20"),
	AGE_21("age", "21"),
	AGE_22("age", "22"),
	AGE_23("age", "23"),
	AGE_24("age", "24"),
	AGE_25("age", "25"),
	MOISTURE_0("moisture", "0"),
	MOISTURE_1("moisture", "1"),
	MOISTURE_2("moisture", "2"),
	MOISTURE_3("moisture", "3"),
	MOISTURE_4("moisture", "4"),
	MOISTURE_5("moisture", "5"),
	MOISTURE_6("moisture", "6"),
	MOISTURE_7("moisture", "7"),
	AXIS_X("axis", "x"),
	AXIS_Y("axis", "y"),
	AXIS_Z("axis", "z"),
	HAS_BOTTLE_0_TRUE("has_bottle_0", "true"),
	HAS_BOTTLE_0_FALSE("has_bottle_0", "false"),
	HAS_BOTTLE_1_TRUE("has_bottle_1", "true"),
	HAS_BOTTLE_1_FALSE("has_bottle_1", "false"),
	HAS_BOTTLE_2_TRUE("has_bottle_2", "true"),
	HAS_BOTTLE_2_FALSE("has_bottle_2", "false"),
	POWERED_TRUE("powered", "true"),
	POWERED_FALSE("powered", "false"),
	BITES_0("bites", "0"),
	BITES_1("bites", "1"),
	BITES_2("bites", "2"),
	BITES_3("bites", "3"),
	BITES_4("bites", "4"),
	BITES_5("bites", "5"),
	BITES_6("bites", "6"),
	LEVEL_0("level", "0"),
	LEVEL_1("level", "1"),
	LEVEL_2("level", "2"),
	LEVEL_3("level", "3"),
	LEVEL_4("level", "4"),
	LEVEL_5("level", "5"),
	LEVEL_6("level", "6"),
	LEVEL_7("level", "7"),
	LEVEL_8("level", "8"),
	LEVEL_9("level", "9"),
	LEVEL_10("level", "10"),
	LEVEL_11("level", "11"),
	LEVEL_12("level", "12"),
	LEVEL_13("level", "13"),
	LEVEL_14("level", "14"),
	LEVEL_15("level", "15"),
	TYPE_SINGLE("type", "single"),
	TYPE_LEFT("type", "left"),
	TYPE_RIGHT("type", "right"),
	NORTH_TRUE("north", "true"),
	NORTH_FALSE("north", "false"),
	NORTH_NONE("north", "none"),
	NORTH_SIDE("north", "side"),
	NORTH_UP("north", "up"),
	SOUTH_TRUE("south", "true"),
	SOUTH_FALSE("south", "false"),
	SOUTH_NONE("south", "none"),
	SOUTH_SIDE("south", "side"),
	SOUTH_UP("south", "up"),
	EAST_TRUE("east", "true"),
	EAST_FALSE("east", "false"),
	EAST_NONE("east", "none"),
	EAST_SIDE("east", "side"),
	EAST_UP("east", "up"),
	WEST_TRUE("west", "true"),
	WEST_FALSE("west", "false"),
	WEST_NONE("west", "none"),
	WEST_SIDE("west", "side"),
	WEST_UP("west", "up"),
	UP_TRUE("up", "true"),
	UP_FALSE("up", "false"),
	DOWN_TRUE("down", "true"),
	DOWN_FALSE("down", "false"),
	CONDITIONAL_TRUE("conditional", "true"),
	CONDITIONAL_FALSE("conditional", "false"),
	INVERTED_TRUE("inverted", "true"),
	INVERTED_FALSE("inverted", "false"),
	TRIGGERED_TRUE("triggered", "true"),
	TRIGGERED_FALSE("triggered", "false"),
	POWER_0("power", "0"),
	POWER_1("power", "1"),
	POWER_2("power", "2"),
	POWER_3("power", "3"),
	POWER_4("power", "4"),
	POWER_5("power", "5"),
	POWER_6("power", "6"),
	POWER_7("power", "7"),
	POWER_8("power", "8"),
	POWER_9("power", "9"),
	POWER_10("power", "10"),
	POWER_11("power", "11"),
	POWER_12("power", "12"),
	POWER_13("power", "13"),
	POWER_14("power", "14"),
	POWER_15("power", "15"),
	HALF_UPPER("half", "upper"),
	HALF_LOWER("half", "lower"),
	HALF_TOP("half", "top"),
	HALF_BOTTOM("half", "bottom"),
	HINGE_LEFT("hinge", "left"),
	HINGE_RIGHT("hinge", "right"),
	OPEN_TRUE("open", "true"),
	OPEN_FALSE("open","false"),
	EYE_TRUE("eye", "true"),
	EYE_FALSE("eye", "false"),
	IN_WALL_TRUE("in_wall", "true"),
	IN_WALL_FALSE("in_wall", "false"),
	LIT_TRUE("lit", "true"),
	LIT_FALSE("lit", "false"),
	SNOWY_TRUE("snowy", "true"),
	SNOWY_FALSE("snowy", "false"),
	ENABLED_TRUE("enabled", "true"),
	ENABLED_FALSE("enabled", "false"),
	HAS_RECORD_TRUE("has_record", "true"),
	HAS_RECORD_FALSE("has_record", "false"),
	PERSISTENT_TRUE("persistent", "true"),
	PERSISTENT_FALSE("persistent", "false"),
	DISTANCE_1("distance", "1"),
	DISTANCE_2("distance", "2"),
	DISTANCE_3("distance", "3"),
	DISTANCE_4("distance", "4"),
	DISTANCE_5("distance", "5"),
	DISTANCE_6("distance", "6"),
	DISTANCE_7("distance", "7"),
	EXTENDED_TRUE("extended","true"),
	EXTENDED_FALSE("extended", "false"),
	TYPE_NORMAL("type", "normal"),
	TYPE_STICKY("type", "sticky"),
	SHORT_TRUE("short", "true"),
	SHORT_FALSE("short", "false"),
	SHAPE_NORTH_SOUTH("shape", "north_south"),
	SHAPE_EAST_WEST("shape", "east_west"),
	SHAPE_NORTH_EAST("shape", "north_east"),
	SHAPE_NORTH_WEST("shape", "north_west"),
	SHAPE_SOUTH_EAST("shape", "south_east"),
	SHAPE_SOUTH_WEST("shape", "south_west"),
	SHAPE_ASCENDING_NORTH("shape", "ascending_north"),
	SHAPE_ASCENDING_SOUTH("shape", "ascending_south"),
	SHAPE_ASCENDING_EAST("shape", "ascending_east"),
	SHAPE_ASCENDING_WEST("shape", "ascending_west"),
	SHAPE_STRAIGHT("shape", "straight"),
	SHAPE_INNER_LEFT("shape", "inner_left"),
	SHAPE_INNER_RIGHT("shape", "inner_right"),
	SHAPE_OUTER_LEFT("shape", "outer_left"),
	SHAPE_OUTER_RIGHT("shape", "outer_right"),
	MODE_COMPARE("mode", "compare"),
	MODE_SUBTRACT("mode", "subtract"),
	DELAY_1("delay", "1"),
	DELAY_2("delay", "2"),
	DELAY_3("delay", "3"),
	DELAY_4("delay", "4"),
	LOCKED_TRUE("locked", "true"),
	LOCKED_FALSE("locked", "false"),
	STAGE_0("stage", "0"),
	STAGE_1("stage", "1"),
	PICKLES_1("pickles", "1"),
	PICKLES_2("pickles", "2"),
	PICKLES_3("pickles", "3"),
	PICKLES_4("pickles", "4"),
	TYPE_TOP("type", "top"),
	TYPE_BOTTOM("type", "bottom"),
	TYPE_DOUBLE("type", "double"),
	LAYERS_1("layers", "1"),
	LAYERS_2("layers", "2"),
	LAYERS_3("layers", "3"),
	LAYERS_4("layers", "4"),
	LAYERS_5("layers", "5"),
	LAYERS_6("layers", "6"),
	LAYERS_7("layers", "7"),
	LAYERS_8("layers", "8"),
	MODE_SAVE("mode", "save"),
	MODE_LOAD("mode", "load"),
	MODE_CORNER("mode", "corner"),
	MODE_DATA("mode", "data"),
	UNSTABLE_TRUE("unstable", "true"),
	UNSTABLE_FALSE("unstable", "false"),
	ATTACHED_TRUE("attached","true"),
	ATTACHED_FALSE("attached","false"),
	DISARMED_TRUE("disarmed","true"),
	DISARMED_FALSE("disarmed","false"),
	DRAG_TRUE("drag", "true"),
	DRAG_FALSE("drag", "false"),
	EGGS_1("eggs","1"),
	EGGS_2("eggs","2"),
	EGGS_3("eggs","3"),
	EGGS_4("eggs","4"),
	HATCH_0("hatch", "0"),
	HATCH_1("hatch", "1"),
	HATCH_2("hatch", "2"),
	MAP_TRUE("map", "true"),
	MAP_FALSE("map", "false"),
	INSTRUMENT_HARP("instrument", "harp"),
	INSTRUMENT_BASEDRUM("instrument", "basedrum"),
	INSTRUMENT_SNARE("instrument", "snare"),
	INSTRUMENT_HAT("instrument", "hat"),
	INSTRUMENT_BASS("instrument", "bass"),
	INSTRUMENT_FLUTE("instrument", "flute"),
	INSTRUMENT_BELL("instrument", "bell"),
	INSTRUMENT_GUITAR("instrument", "guitar"),
	INSTRUMENT_CHIME("instrument", "chime"),
	INSTRUMENT_XYLOPHONE("instrument", "xylophone"),
	NOTE_0("note", "0"),
	NOTE_1("note", "1"),
	NOTE_2("note", "2"),
	NOTE_3("note", "3"),
	NOTE_4("note", "4"),
	NOTE_5("note", "5"),
	NOTE_6("note", "6"),
	NOTE_7("note", "7"),
	NOTE_8("note", "8"),
	NOTE_9("note", "9"),
	NOTE_10("note", "10"),
	NOTE_11("note", "11"),
	NOTE_12("note", "12"),
	NOTE_13("note", "13"),
	NOTE_14("note", "14"),
	NOTE_15("note", "15"),
	NOTE_16("note", "16"),
	NOTE_17("note", "17"),
	NOTE_18("note", "18"),
	NOTE_19("note", "19"),
	NOTE_20("note", "20"),
	NOTE_21("note", "21"),
	NOTE_22("note", "22"),
	NOTE_23("note", "23"),
	NOTE_24("note", "24");


	public final String name, value;
	public final String[]	allowedBlocks;

	BlockState(String name, String value, String[] allowedBlocks) {
		this.name = name;
		this.value = value;
		this.allowedBlocks = allowedBlocks;
	}

	private static Map<String, EnumSet<BlockState>>	values	= new HashMap<>();
	public static final EnumSet<BlockState> NONE = EnumSet.noneOf(BlockState.class);

	static {
		for (BlockState state : values()) {
			values.putIfAbsent(state.name, EnumSet.noneOf(BlockState.class));
			values.get(state.name).add(state);
		}
	}

	public static BlockState byProperty(String name, String value) {
		try {
			return valueOf(name.toUpperCase() + "_" + value.toUpperCase());
		} catch (IllegalArgumentException e) {
			throw new IllegalArgumentException("State " + name + "=" + value + " does not exist", e);
		}
	}

	/** Returns all states whose key is the same as {@code name}. Note that only one of them may be part of an actual block at the same time! */
	public static EnumSet<BlockState> byProperty(String name) {
		return values.get(name);
	}
}